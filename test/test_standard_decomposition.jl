using Test
using IPGBs.StandardDecomposition
using IPGBs.FourTi2
using IPGBs.GBElements

"""
This corresponds to Example 2.4 in Hosten and Thomas (1998).
Includes 30 standard pairs.
"""
function example_2_4()
    M = [[0,0,11],[1,0,1],[4,7,0],[5,5,0],[6,3,0],[7,1,0],[8,0,0]]
    std = standard_decomposition(M)
    answer = [
        ([0, 0, 10], Bool[0, 1, 0]),
        ([0, 0, 9], Bool[0, 1, 0]),
        ([0, 0, 8], Bool[0, 1, 0]),
        ([0, 0, 7], Bool[0, 1, 0]),
        ([0, 0, 6], Bool[0, 1, 0]),
        ([0, 0, 5], Bool[0, 1, 0]),
        ([0, 0, 4], Bool[0, 1, 0]),
        ([0, 0, 3], Bool[0, 1, 0]),
        ([0, 0, 2], Bool[0, 1, 0]),
        ([0, 0, 1], Bool[0, 1, 0]),
        ([3, 0, 0], Bool[0, 1, 0]),
        ([4, 6, 0], Bool[0, 0, 0]),
        ([4, 5, 0], Bool[0, 0, 0]),
        ([5, 4, 0], Bool[0, 0, 0]),
        ([5, 3, 0], Bool[0, 0, 0]),
        ([6, 2, 0], Bool[0, 0, 0]),
        ([6, 1, 0], Bool[0, 0, 0]),
        ([7, 0, 0], Bool[0, 0, 0]),
        ([2, 0, 0], Bool[0, 1, 0]),
        ([4, 4, 0], Bool[0, 0, 0]),
        ([4, 3, 0], Bool[0, 0, 0]),
        ([5, 2, 0], Bool[0, 0, 0]),
        ([5, 1, 0], Bool[0, 0, 0]),
        ([6, 0, 0], Bool[0, 0, 0]),
        ([1, 0, 0], Bool[0, 1, 0]),
        ([4, 2, 0], Bool[0, 0, 0]),
        ([4, 1, 0], Bool[0, 0, 0]),
        ([5, 0, 0], Bool[0, 0, 0]),
        ([0, 0, 0], Bool[0, 1, 0]),
        ([4, 0, 0], Bool[0, 0, 0])
    ]
    return std, answer
end

function example_from_matrix(A, c)
    gb = FourTi2.groebner(A, c)
    monoms = leading_term.(ipgbs_form(gb))
    std = standard_decomposition(monoms)
    return std
end

"""
Example 3 from Hosten and Thomas (2003).
Includes 23 standard pairs.
"""
function example_3()
    A = [1 2 2 3 2; 3 3 1 1 0]
    c = [9, 9, 4, 0, 9]
    answer = [
        ([0, 5, 0, 0, 0], [1, 0, 0, 1, 0])
        ([1, 2, 0, 0, 1], [0, 0, 0, 0, 0])
        ([0, 2, 0, 0, 1], [0, 0, 0, 0, 0])
        ([2, 0, 4, 0, 0], [0, 0, 0, 1, 0])
        ([1, 0, 4, 0, 0], [0, 0, 0, 1, 0])
        ([0, 0, 4, 0, 0], [0, 0, 0, 1, 0])
        ([0, 0, 1, 0, 0], [0, 0, 0, 1, 1])
        ([3, 0, 3, 0, 0], [0, 0, 0, 1, 0])
        ([2, 0, 3, 0, 0], [0, 0, 0, 1, 0])
        ([1, 0, 3, 0, 0], [0, 0, 0, 1, 0])
        ([0, 0, 3, 0, 0], [0, 0, 0, 1, 0])
        ([0, 0, 2, 0, 0], [1, 0, 0, 1, 0])
        ([0, 0, 1, 0, 0], [1, 0, 0, 1, 0])
        ([0, 0, 0, 0, 0], [0, 0, 0, 1, 1])
        ([1, 0, 0, 0, 2], [0, 0, 0, 0, 0])
        ([1, 1, 0, 0, 1], [0, 0, 0, 1, 0])
        ([1, 0, 0, 0, 1], [0, 0, 0, 1, 0])
        ([0, 4, 0, 0, 0], [1, 0, 0, 1, 0])
        ([0, 1, 0, 0, 1], [0, 0, 0, 1, 0])
        ([0, 3, 0, 0, 0], [1, 0, 0, 1, 0])
        ([0, 2, 0, 0, 0], [1, 0, 0, 1, 0])
        ([0, 1, 0, 0, 0], [1, 0, 0, 1, 0])
        ([0, 0, 0, 0, 0], [1, 0, 0, 1, 0])
    ]
    return example_from_matrix(A, c), answer
end

"""
Example 4 from Hosten and Thomas (2003).
Includes 70 standard pairs.
"""
function example_4()
    A = [5 0 0 2 1 0; 0 5 0 1 4 2; 0 0 5 2 0 3]
    c = [21, 6, 1, 0, 0, 0]
    answer = [
        ([0, 0, 4, 0, 0, 0], [0, 0, 0, 1, 1, 1])
        ([0, 0, 3, 0, 0, 0], [0, 0, 0, 1, 1, 1])
        ([0, 0, 2, 0, 0, 0], [0, 0, 0, 1, 1, 1])
        ([0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1])
        ([0, 0, 0, 0, 3, 0], [0, 0, 1, 1, 0, 1])
        ([0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1])
        ([0, 0, 0, 0, 2, 0], [0, 0, 1, 1, 0, 1])
        ([0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1])
        ([0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1])
        ([1, 0, 0, 0, 2, 1], [0, 0, 1, 1, 0, 0])
        ([0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0])
        ([0, 0, 0, 0, 0, 2], [1, 0, 1, 1, 0, 0])
        ([0, 0, 2, 0, 2, 1], [1, 0, 0, 1, 0, 0])
        ([0, 0, 1, 0, 2, 1], [1, 0, 0, 1, 0, 0])
        ([0, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0, 0])
        ([0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 0])
        ([1, 0, 0, 0, 2, 0], [0, 0, 1, 1, 0, 0])
        ([0, 1, 3, 0, 0, 0], [0, 0, 0, 0, 1, 1])
        ([0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1])
        ([0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1])
        ([0, 1, 3, 0, 0, 0], [0, 0, 0, 1, 1, 0])
        ([0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0])
        ([1, 1, 0, 0, 0, 2], [0, 0, 1, 0, 0, 0])
        ([1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0])
        ([1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0])
        ([0, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0])
        ([0, 2, 2, 0, 0, 0], [0, 0, 0, 1, 1, 0])
        ([0, 3, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0])
        ([0, 4, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0])
        ([0, 0, 2, 0, 0, 0], [0, 1, 0, 0, 1, 1])
        ([0, 1, 2, 0, 0, 0], [0, 0, 0, 1, 1, 0])
        ([0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1])
        ([0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1])
        ([0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0])
        ([0, 0, 0, 2, 0, 0], [0, 1, 0, 0, 1, 0])
        ([0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0])
        ([1, 0, 3, 0, 4, 0], [0, 0, 0, 1, 0, 0])
        ([1, 0, 3, 0, 3, 0], [0, 0, 0, 1, 0, 0])
        ([1, 1, 2, 0, 2, 1], [0, 0, 0, 0, 0, 0])
        ([1, 1, 2, 0, 1, 1], [0, 0, 0, 0, 0, 0])
        ([1, 1, 2, 0, 4, 0], [0, 0, 0, 1, 0, 0])
        ([1, 1, 2, 0, 3, 0], [0, 0, 0, 1, 0, 0])
        ([1, 1, 2, 0, 2, 0], [0, 0, 0, 1, 0, 0])
        ([1, 1, 2, 0, 1, 0], [0, 0, 0, 1, 0, 0])
        ([1, 2, 0, 0, 2, 1], [0, 0, 1, 0, 0, 0])
        ([1, 2, 0, 0, 0, 2], [0, 0, 1, 0, 0, 0])
        ([1, 2, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0])
        ([1, 2, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0])
        ([1, 3, 0, 0, 0, 2], [0, 0, 1, 0, 0, 0])
        ([0, 3, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0])
        ([0, 2, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0])
        ([0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0])
        ([0, 1, 1, 0, 0, 2], [1, 0, 0, 0, 0, 0])
        ([0, 2, 0, 0, 0, 2], [1, 0, 0, 0, 0, 0])
        ([0, 1, 0, 0, 0, 2], [1, 0, 0, 0, 0, 0])
        ([0, 1, 1, 0, 2, 1], [1, 0, 0, 0, 0, 0])
        ([0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0])
        ([0, 1, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0])
        ([0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0])
        ([0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0])
        ([0, 2, 1, 0, 0, 0], [1, 0, 0, 1, 1, 0])
        ([0, 1, 1, 0, 0, 0], [1, 0, 0, 1, 1, 0])
        ([0, 0, 1, 0, 0, 0], [1, 0, 0, 1, 1, 0])
        ([0, 3, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0])
        ([0, 0, 2, 0, 4, 0], [1, 0, 0, 1, 0, 0])
        ([0, 0, 2, 0, 3, 0], [1, 0, 0, 1, 0, 0])
        ([0, 0, 2, 0, 2, 0], [1, 0, 0, 1, 0, 0])
        ([0, 2, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0])
        ([0, 1, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0])
        ([0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0])
    ]
    return example_from_matrix(A, c), answer
end

"""
Example 5 from Hosten and Thomas (2003).
Includes 6 standard pairs.
"""
function example_5()
    A = [1 0 1 1 1 1; 0 1 1 1 2 2; 0 0 1 2 3 4]
    c = [0, 0, 1, 1, 0, 3]
    answer = [
        ([0, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 0])
        ([0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1])
        ([0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0])
        ([0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1])
        ([0, 0, 0, 1, 0, 0], [1, 1, 0, 0, 1, 0])
        ([0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 0])
    ]
    return example_from_matrix(A, c), answer
end

function test_std(std, answer)
    @test all(s -> s in answer, std)
    @test all(s -> s in std, answer)
    @test length(std) == length(answer)
end

@testset "Standard decomposition tests" begin
    @testset "Example 2.4" begin
        std, answer = example_2_4()
        test_std(std, answer)
    end
    @testset "Example 3" begin
        std, answer = example_3()
        test_std(std, answer)
    end
    @testset "Example 4" begin
        std, answer = example_4()
        test_std(std, answer)
    end
    @testset "Example 5" begin
        std, answer = example_5()
        test_std(std, answer)
    end
end
